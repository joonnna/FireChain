// Code generated by protoc-gen-go. DO NOT EDIT.
// source: chainstate.proto

/*
Package blockchain is a generated protocol buffer package.

It is generated from these files:
	chainstate.proto

It has these top-level messages:
	EntryHeader
	BlockEntry
	BlockHeader
	BlockContent
	Signature
	PeerState
	State
	StateResponse
	WormPayload
*/
package blockchain

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type EntryHeader struct {
	Hash []byte `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (m *EntryHeader) Reset()                    { *m = EntryHeader{} }
func (m *EntryHeader) String() string            { return proto.CompactTextString(m) }
func (*EntryHeader) ProtoMessage()               {}
func (*EntryHeader) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *EntryHeader) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

type BlockEntry struct {
	Hash    []byte `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	Content []byte `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
}

func (m *BlockEntry) Reset()                    { *m = BlockEntry{} }
func (m *BlockEntry) String() string            { return proto.CompactTextString(m) }
func (*BlockEntry) ProtoMessage()               {}
func (*BlockEntry) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *BlockEntry) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

func (m *BlockEntry) GetContent() []byte {
	if m != nil {
		return m.Content
	}
	return nil
}

type BlockHeader struct {
	RootHash []byte `protobuf:"bytes,1,opt,name=rootHash,proto3" json:"rootHash,omitempty"`
	PrevHash []byte `protobuf:"bytes,2,opt,name=prevHash,proto3" json:"prevHash,omitempty"`
}

func (m *BlockHeader) Reset()                    { *m = BlockHeader{} }
func (m *BlockHeader) String() string            { return proto.CompactTextString(m) }
func (*BlockHeader) ProtoMessage()               {}
func (*BlockHeader) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *BlockHeader) GetRootHash() []byte {
	if m != nil {
		return m.RootHash
	}
	return nil
}

func (m *BlockHeader) GetPrevHash() []byte {
	if m != nil {
		return m.PrevHash
	}
	return nil
}

type BlockContent struct {
	RootHash []byte   `protobuf:"bytes,1,opt,name=rootHash,proto3" json:"rootHash,omitempty"`
	PrevHash []byte   `protobuf:"bytes,2,opt,name=prevHash,proto3" json:"prevHash,omitempty"`
	Content  [][]byte `protobuf:"bytes,3,rep,name=content,proto3" json:"content,omitempty"`
}

func (m *BlockContent) Reset()                    { *m = BlockContent{} }
func (m *BlockContent) String() string            { return proto.CompactTextString(m) }
func (*BlockContent) ProtoMessage()               {}
func (*BlockContent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *BlockContent) GetRootHash() []byte {
	if m != nil {
		return m.RootHash
	}
	return nil
}

func (m *BlockContent) GetPrevHash() []byte {
	if m != nil {
		return m.PrevHash
	}
	return nil
}

func (m *BlockContent) GetContent() [][]byte {
	if m != nil {
		return m.Content
	}
	return nil
}

type Signature struct {
	R []byte `protobuf:"bytes,1,opt,name=r,proto3" json:"r,omitempty"`
	S []byte `protobuf:"bytes,2,opt,name=s,proto3" json:"s,omitempty"`
}

func (m *Signature) Reset()                    { *m = Signature{} }
func (m *Signature) String() string            { return proto.CompactTextString(m) }
func (*Signature) ProtoMessage()               {}
func (*Signature) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Signature) GetR() []byte {
	if m != nil {
		return m.R
	}
	return nil
}

func (m *Signature) GetS() []byte {
	if m != nil {
		return m.S
	}
	return nil
}

type PeerState struct {
	Id          string     `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	EntryHashes [][]byte   `protobuf:"bytes,2,rep,name=entryHashes,proto3" json:"entryHashes,omitempty"`
	RootHash    []byte     `protobuf:"bytes,3,opt,name=rootHash,proto3" json:"rootHash,omitempty"`
	PrevHash    []byte     `protobuf:"bytes,4,opt,name=prevHash,proto3" json:"prevHash,omitempty"`
	Epoch       uint64     `protobuf:"varint,5,opt,name=epoch" json:"epoch,omitempty"`
	Signature   *Signature `protobuf:"bytes,6,opt,name=signature" json:"signature,omitempty"`
	// Only for worm interaction
	// TODO solve this differently
	HttpAddr string `protobuf:"bytes,7,opt,name=httpAddr" json:"httpAddr,omitempty"`
}

func (m *PeerState) Reset()                    { *m = PeerState{} }
func (m *PeerState) String() string            { return proto.CompactTextString(m) }
func (*PeerState) ProtoMessage()               {}
func (*PeerState) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *PeerState) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *PeerState) GetEntryHashes() [][]byte {
	if m != nil {
		return m.EntryHashes
	}
	return nil
}

func (m *PeerState) GetRootHash() []byte {
	if m != nil {
		return m.RootHash
	}
	return nil
}

func (m *PeerState) GetPrevHash() []byte {
	if m != nil {
		return m.PrevHash
	}
	return nil
}

func (m *PeerState) GetEpoch() uint64 {
	if m != nil {
		return m.Epoch
	}
	return 0
}

func (m *PeerState) GetSignature() *Signature {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *PeerState) GetHttpAddr() string {
	if m != nil {
		return m.HttpAddr
	}
	return ""
}

type State struct {
	Peers          map[string]*PeerState `protobuf:"bytes,1,rep,name=peers" json:"peers,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	MissingEntries [][]byte              `protobuf:"bytes,2,rep,name=missingEntries,proto3" json:"missingEntries,omitempty"`
}

func (m *State) Reset()                    { *m = State{} }
func (m *State) String() string            { return proto.CompactTextString(m) }
func (*State) ProtoMessage()               {}
func (*State) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *State) GetPeers() map[string]*PeerState {
	if m != nil {
		return m.Peers
	}
	return nil
}

func (m *State) GetMissingEntries() [][]byte {
	if m != nil {
		return m.MissingEntries
	}
	return nil
}

type StateResponse struct {
	Entries []*BlockEntry `protobuf:"bytes,1,rep,name=entries" json:"entries,omitempty"`
}

func (m *StateResponse) Reset()                    { *m = StateResponse{} }
func (m *StateResponse) String() string            { return proto.CompactTextString(m) }
func (*StateResponse) ProtoMessage()               {}
func (*StateResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *StateResponse) GetEntries() []*BlockEntry {
	if m != nil {
		return m.Entries
	}
	return nil
}

type WormPayload struct {
	Blocks map[uint64]*BlockHeader `protobuf:"bytes,1,rep,name=blocks" json:"blocks,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *WormPayload) Reset()                    { *m = WormPayload{} }
func (m *WormPayload) String() string            { return proto.CompactTextString(m) }
func (*WormPayload) ProtoMessage()               {}
func (*WormPayload) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *WormPayload) GetBlocks() map[uint64]*BlockHeader {
	if m != nil {
		return m.Blocks
	}
	return nil
}

func init() {
	proto.RegisterType((*EntryHeader)(nil), "blockchain.EntryHeader")
	proto.RegisterType((*BlockEntry)(nil), "blockchain.BlockEntry")
	proto.RegisterType((*BlockHeader)(nil), "blockchain.BlockHeader")
	proto.RegisterType((*BlockContent)(nil), "blockchain.BlockContent")
	proto.RegisterType((*Signature)(nil), "blockchain.Signature")
	proto.RegisterType((*PeerState)(nil), "blockchain.PeerState")
	proto.RegisterType((*State)(nil), "blockchain.State")
	proto.RegisterType((*StateResponse)(nil), "blockchain.StateResponse")
	proto.RegisterType((*WormPayload)(nil), "blockchain.WormPayload")
}

func init() { proto.RegisterFile("chainstate.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 454 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x53, 0xcb, 0x6e, 0xd3, 0x40,
	0x14, 0xd5, 0xc4, 0x71, 0x42, 0xae, 0x43, 0x55, 0x8d, 0x78, 0x58, 0x11, 0x0b, 0x33, 0x48, 0x60,
	0x09, 0x11, 0xa1, 0x74, 0x83, 0xca, 0xaa, 0xa0, 0x4a, 0xdd, 0x51, 0x4d, 0x17, 0x6c, 0x99, 0xda,
	0x57, 0xb5, 0xd5, 0xd4, 0x63, 0xcd, 0x4c, 0x2b, 0xe5, 0x67, 0xf8, 0x0a, 0x3e, 0x87, 0x8f, 0x41,
	0xf3, 0xf0, 0x23, 0x29, 0x62, 0xc1, 0xce, 0xf7, 0xce, 0xb9, 0x67, 0xce, 0x39, 0xbe, 0x03, 0xc7,
	0x45, 0x25, 0xea, 0x46, 0x1b, 0x61, 0x70, 0xdd, 0x2a, 0x69, 0x24, 0x85, 0xeb, 0xad, 0x2c, 0x6e,
	0x5d, 0x9b, 0xbd, 0x86, 0xe4, 0xbc, 0x31, 0x6a, 0x77, 0x81, 0xa2, 0x44, 0x45, 0x29, 0x4c, 0x2b,
	0xa1, 0xab, 0x94, 0x64, 0x24, 0x5f, 0x72, 0xf7, 0xcd, 0x4e, 0x01, 0xbe, 0xd8, 0x01, 0x87, 0xfb,
	0x1b, 0x82, 0xa6, 0x30, 0x2f, 0x64, 0x63, 0xb0, 0x31, 0xe9, 0xc4, 0xb5, 0xbb, 0x92, 0x9d, 0x43,
	0xe2, 0x66, 0x03, 0xfd, 0x0a, 0x9e, 0x28, 0x29, 0xcd, 0xc5, 0x40, 0xd0, 0xd7, 0xf6, 0xac, 0x55,
	0xf8, 0xe0, 0xce, 0x3c, 0x4b, 0x5f, 0xb3, 0x1f, 0xb0, 0x74, 0x34, 0x5f, 0x3d, 0xed, 0xff, 0xf2,
	0x8c, 0x85, 0x46, 0x59, 0x34, 0x16, 0xfa, 0x0e, 0x16, 0x57, 0xf5, 0x4d, 0x23, 0xcc, 0xbd, 0x42,
	0xba, 0x04, 0xa2, 0x02, 0x2f, 0x51, 0xb6, 0xd2, 0x81, 0x89, 0x68, 0xf6, 0x9b, 0xc0, 0xe2, 0x12,
	0x51, 0x5d, 0xd9, 0x40, 0xe9, 0x11, 0x4c, 0xea, 0xd2, 0x41, 0x17, 0x7c, 0x52, 0x97, 0x34, 0x83,
	0x04, 0x5d, 0x9c, 0x42, 0x57, 0x68, 0xa7, 0xec, 0x25, 0xe3, 0xd6, 0x9e, 0xf4, 0xe8, 0x1f, 0xd2,
	0xa7, 0x07, 0xd2, 0x9f, 0x41, 0x8c, 0xad, 0x2c, 0xaa, 0x34, 0xce, 0x48, 0x3e, 0xe5, 0xbe, 0xa0,
	0x27, 0xb0, 0xd0, 0x9d, 0xec, 0x74, 0x96, 0x91, 0x3c, 0xd9, 0x3c, 0x5f, 0x0f, 0xbf, 0x77, 0xdd,
	0x7b, 0xe2, 0x03, 0xce, 0x5e, 0x53, 0x19, 0xd3, 0x9e, 0x95, 0xa5, 0x4a, 0xe7, 0x4e, 0x7a, 0x5f,
	0xb3, 0x5f, 0x04, 0x62, 0x6f, 0x6d, 0x03, 0x71, 0x8b, 0xa8, 0x74, 0x4a, 0xb2, 0x28, 0x4f, 0x36,
	0xaf, 0xf6, 0x68, 0xdd, 0x36, 0xd9, 0x18, 0xb4, 0xdb, 0x0a, 0xee, 0xa1, 0xf4, 0x2d, 0x1c, 0xdd,
	0xd5, 0x5a, 0xd7, 0xcd, 0x8d, 0x6d, 0xd7, 0x7d, 0x02, 0x07, 0xdd, 0xd5, 0x37, 0x80, 0x61, 0x98,
	0x1e, 0x43, 0x74, 0x8b, 0xbb, 0x90, 0xa2, 0xfd, 0xa4, 0xef, 0x21, 0x7e, 0x10, 0xdb, 0x7b, 0x74,
	0xb1, 0x1f, 0x58, 0xea, 0xc3, 0xe7, 0x1e, 0x73, 0x3a, 0xf9, 0x44, 0xd8, 0x19, 0x3c, 0xf5, 0x3d,
	0xd4, 0xad, 0x6c, 0x34, 0xd2, 0x8f, 0x30, 0xc7, 0x20, 0xc1, 0xeb, 0x7f, 0x31, 0xe6, 0x18, 0xf6,
	0x99, 0x77, 0x30, 0xf6, 0x93, 0x40, 0xf2, 0x5d, 0xaa, 0xbb, 0x4b, 0xb1, 0xdb, 0x4a, 0x51, 0xd2,
	0xcf, 0x30, 0x73, 0x13, 0x1d, 0xc1, 0x9b, 0x31, 0xc1, 0x08, 0xe8, 0xc9, 0x42, 0x0e, 0x61, 0x64,
	0xc5, 0xc3, 0xde, 0x3f, 0x76, 0x38, 0xf5, 0x0e, 0x3f, 0xec, 0x3b, 0x7c, 0xf9, 0x48, 0x9d, 0x7f,
	0x31, 0x23, 0x8f, 0xd7, 0x33, 0xf7, 0x7a, 0x4f, 0xfe, 0x04, 0x00, 0x00, 0xff, 0xff, 0x3e, 0xae,
	0x0f, 0xbc, 0xd1, 0x03, 0x00, 0x00,
}
